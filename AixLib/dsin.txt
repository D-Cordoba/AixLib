#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
    3600                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     500                   # nInterval    Number of communication intervals, if > 0
  9.9999999999999995E-07   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
  2.0000000000000000E-14   # teps     Bound to check, if 2 equal time instants
  1.0000000000000000E-10   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
  9.9999999999999995E-07   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(366,72)
_dummy
_derdummy
dTEva_nominal
dTCon_nominal
QCon_flow_nominal
m1_flow_nominal
sou1.nPorts
sou1.verifyInputs
sou1.ports[1].m_flow
sou1.ports[1].p
sou1.ports[1].h_outflow
sou1.flowDirection
sou1.X_in_internal[1]
sou1.use_m_flow_in
sou1.m_flow
sou1.m_flow_in_internal
sou1.use_T_in
sou1.T
sou1.use_X_in
sou1.use_Xi_in
sou1.use_C_in
sou1.X[1]
sou2.nPorts
sou2.verifyInputs
sou2.ports[1].m_flow
sou2.ports[1].p
sou2.ports[1].h_outflow
sou2.flowDirection
sou2.X_in_internal[1]
sou2.use_m_flow_in
sou2.m_flow
sou2.use_T_in
sou2.T
sou2.use_X_in
sou2.use_Xi_in
sou2.use_C_in
sou2.X[1]
sin1.nPorts
sin1.medium.d
sin1.medium.X[1]
sin1.medium.R
sin1.medium.MM
sin1.medium.preferredMediumStates
sin1.medium.standardOrderComponents
sin1.medium.T_degC
sin1.medium.p_bar
sin1.ports[1].m_flow
sin1.ports[1].h_outflow
sin1.flowDirection
sin1.use_p
sin1.p
sin1.d
sin1.use_T
sin1.T
sin1.h
sin1.X[1]
sin2.nPorts
sin2.medium.d
sin2.medium.X[1]
sin2.medium.R
sin2.medium.MM
sin2.medium.preferredMediumStates
sin2.medium.standardOrderComponents
sin2.medium.T_degC
sin2.medium.p_bar
sin2.ports[1].h_outflow
sin2.flowDirection
sin2.use_p
sin2.p
sin2.d
sin2.use_T
sin2.T
sin2.h
sin2.X[1]
TConLvg.height
TConLvg.duration
TConLvg.offset
TConLvg.startTime
TConLvg.y
mEva_flow.k
mEva_flow.u
QEva_flow.u1
QEva_flow.u2
QEva_flow.k1
QEva_flow.k2
cp2_default
heaPum.allowFlowReversal1
heaPum.allowFlowReversal2
heaPum.port_a1.m_flow
heaPum.port_a1.h_outflow
heaPum.port_b1.m_flow
heaPum.port_b1.h_outflow
heaPum.port_a2.h_outflow
heaPum.port_b2.h_outflow
heaPum.m1_flow_nominal
heaPum.m2_flow_nominal
heaPum.m1_flow_small
heaPum.m2_flow_small
heaPum.show_T
heaPum.m1_flow
heaPum.dp1
heaPum.dp2
heaPum.sta_a1.T
heaPum.sta_b1.T
heaPum.sta_a2.T
heaPum.sta_b2.T
heaPum.state_a1_inflow.T
heaPum.state_b1_inflow.T
heaPum.state_a2_inflow.T
heaPum.state_b2_inflow.T
heaPum.QEva_flow_nominal
heaPum.QCon_flow_nominal
heaPum.dTEva_nominal
heaPum.dTCon_nominal
heaPum.use_eta_Carnot_nominal
heaPum.etaCarnot_nominal
heaPum.COP_nominal
heaPum.TCon_nominal
heaPum.TEva_nominal
heaPum.a[1]
heaPum.dp1_nominal
heaPum.dp2_nominal
heaPum.TAppCon_nominal
heaPum.TAppEva_nominal
heaPum.homotopyInitialization
heaPum.from_dp1
heaPum.from_dp2
heaPum.linearizeFlowResistance1
heaPum.linearizeFlowResistance2
heaPum.deltaM1
heaPum.deltaM2
heaPum.tau1
heaPum.tau2
heaPum.T1_start
heaPum.T2_start
heaPum.energyDynamics
heaPum.QEva_flow
heaPum.yPL
heaPum.etaPL
heaPum.COP
heaPum.COPCar
heaPum.TConAct
heaPum.TEvaAct
heaPum.COP_is_for_cooling
heaPum.etaCarnot_nominal_internal
heaPum.evaluate_etaPL
heaPum.TUseAct_nominal
heaPum.TUseAct
heaPum.cp1_default
heaPum.cp2_default
heaPum.staA1.T
heaPum.staB1.T
heaPum.staA2.T
heaPum.staB2.T
heaPum.con.allowFlowReversal
heaPum.con.port_a.m_flow
heaPum.con.port_a.h_outflow
heaPum.con.port_b.m_flow
heaPum.con.m_flow_nominal
heaPum.con.m_flow_small
heaPum.con.show_T
heaPum.con.m_flow
heaPum.con.dp
heaPum.con._m_flow_start
heaPum.con._dp_start
heaPum.con.computeFlowResistance
heaPum.con.from_dp
heaPum.con.dp_nominal
heaPum.con.linearizeFlowResistance
heaPum.con.deltaM
heaPum.con.tau
heaPum.con.homotopyInitialization
heaPum.con.preDro.allowFlowReversal
heaPum.con.preDro.port_a.m_flow
heaPum.con.preDro.port_a.h_outflow
heaPum.con.preDro.port_b.m_flow
heaPum.con.preDro.m_flow_nominal
heaPum.con.preDro.m_flow_small
heaPum.con.preDro.show_T
heaPum.con.preDro.m_flow
heaPum.con.preDro.dp
heaPum.con.preDro._m_flow_start
heaPum.con.preDro._dp_start
heaPum.con.preDro.from_dp
heaPum.con.preDro.dp_nominal
heaPum.con.preDro.homotopyInitialization
heaPum.con.preDro.linearized
heaPum.con.preDro.m_flow_turbulent
heaPum.con.preDro.sta_default.p
heaPum.con.preDro.sta_default.T
heaPum.con.preDro.eta_default
heaPum.con.preDro.m_flow_nominal_pos
heaPum.con.preDro.dp_nominal_pos
_GlobalScope.Modelica.Media.Interfaces.PartialPureSubstance.X_default[1]
heaPum.con.preDro.deltaM
heaPum.con.preDro.k
heaPum.con.preDro.computeFlowResistance
heaPum.con.preDro.coeff
heaPum.con.outCon.allowFlowReversal
heaPum.con.outCon.port_a.m_flow
heaPum.con.outCon.port_a.h_outflow
heaPum.con.outCon.port_b.m_flow
heaPum.con.outCon.m_flow_nominal
heaPum.con.outCon.m_flow_small
heaPum.con.outCon.show_T
heaPum.con.outCon.m_flow
heaPum.con.outCon.dp
heaPum.con.outCon._m_flow_start
heaPum.con.outCon._dp_start
heaPum.con.outCon.QMax_flow
heaPum.con.outCon.QMin_flow
heaPum.con.outCon.mWatMax_flow
heaPum.con.outCon.mWatMin_flow
heaPum.con.outCon.tau
heaPum.con.outCon.T_start
heaPum.con.outCon.X_start[1]
heaPum.con.outCon.energyDynamics
heaPum.con.outCon.massDynamics
heaPum.con.outCon.use_TSet
heaPum.con.outCon.use_X_wSet
heaPum.con.outCon.mWat_flow
heaPum.con.outCon.cp_default
heaPum.con.outCon.restrictHeat
heaPum.con.outCon.restrictCool
heaPum.con.outCon.restrictHumi
heaPum.con.outCon.restrictDehu
heaPum.con.outCon.deltaH
heaPum.con.outCon.deltaXi
heaPum.con.outCon.m_flow_pos
heaPum.con.outCon.m_flow_non_zero
heaPum.con.outCon.hSet
heaPum.con.outCon.Xi
heaPum.con.outCon.Xi_outflow
heaPum.con.outCon.dhAct
heaPum.con.outCon.dXiAct
heaPum.con.outCon.k
heaPum.con.outCon.mNor_flow
heaPum.con.outCon.X_wSet_internal
heaPum.con.QMax_flow
heaPum.con.QMin_flow
heaPum.con.mWatMax_flow
heaPum.con.mWatMin_flow
heaPum.con.T_start
heaPum.con.X_start[1]
heaPum.con.energyDynamics
heaPum.con.massDynamics
heaPum.con.use_TSet
heaPum.con.use_X_wSet
heaPum.con.Q_flow
heaPum.con.mWat_flow
heaPum.eva.allowFlowReversal
heaPum.eva.port_a.h_outflow
heaPum.eva.m_flow_nominal
heaPum.eva.m_flow_small
heaPum.eva.show_T
heaPum.eva.dp
heaPum.eva._m_flow_start
heaPum.eva._dp_start
heaPum.eva.computeFlowResistance
heaPum.eva.from_dp
heaPum.eva.dp_nominal
heaPum.eva.linearizeFlowResistance
heaPum.eva.deltaM
heaPum.eva.tau
heaPum.eva.homotopyInitialization
heaPum.eva.energyDynamics
heaPum.eva.massDynamics
heaPum.eva.p_start
heaPum.eva.T_start
heaPum.eva.X_start[1]
heaPum.eva.vol.energyDynamics
heaPum.eva.vol.massDynamics
heaPum.eva.vol.substanceDynamics
heaPum.eva.vol.traceDynamics
heaPum.eva.vol.p_start
heaPum.eva.vol.T_start
heaPum.eva.vol.X_start[1]
heaPum.eva.vol.mSenFac
heaPum.eva.vol.initialize_p
heaPum.eva.vol.prescribedHeatFlowRate
heaPum.eva.vol.simplify_mWat_flow
heaPum.eva.vol.m_flow_nominal
heaPum.eva.vol.nPorts
heaPum.eva.vol.m_flow_small
heaPum.eva.vol.allowFlowReversal
heaPum.eva.vol.V
heaPum.eva.vol.ports[1].h_outflow
heaPum.eva.vol.T
heaPum.eva.vol.U
heaPum.eva.vol.m
heaPum.eva.vol.rho_start
heaPum.eva.vol.state_default.p
heaPum.eva.vol.state_default.T
heaPum.eva.vol.rho_default
heaPum.eva.vol.state_start.p
heaPum.eva.vol.state_start.T
heaPum.eva.vol.useSteadyStateTwoPort
heaPum.eva.vol.use_C_flow
heaPum.eva.preDro.allowFlowReversal
heaPum.eva.preDro.port_a.h_outflow
heaPum.eva.preDro.m_flow_nominal
heaPum.eva.preDro.m_flow_small
heaPum.eva.preDro.show_T
heaPum.eva.preDro.dp
heaPum.eva.preDro._m_flow_start
heaPum.eva.preDro._dp_start
heaPum.eva.preDro.from_dp
heaPum.eva.preDro.dp_nominal
heaPum.eva.preDro.homotopyInitialization
heaPum.eva.preDro.linearized
heaPum.eva.preDro.m_flow_turbulent
heaPum.eva.preDro.sta_default.p
heaPum.eva.preDro.sta_default.T
heaPum.eva.preDro.eta_default
heaPum.eva.preDro.m_flow_nominal_pos
heaPum.eva.preDro.dp_nominal_pos
heaPum.eva.preDro.deltaM
heaPum.eva.preDro.k
heaPum.eva.preDro.computeFlowResistance
heaPum.eva.preDro.coeff
heaPum.eva.sta_default.p
heaPum.eva.sta_default.T
heaPum.eva.rho_default
heaPum.eva.sta_start.p
heaPum.eva.sta_start.T
heaPum.eva.h_outflow_start
heaPum.eva.Q_flow_nominal
heaPum.eva.u
heaPum.eva.preHea.T_ref
heaPum.eva.preHea.alpha
heaPum.eva.gai.k
heaPum.QEva_flow_min
heaPum.QCon_flow_max
heaPum.Q_heating_nominal
heaPum.Q_cooling_nominal
heaPum.modi.threshold
heaPum.realExpression.y
heaPum.Q_flow_internal.k1
heaPum.Q_flow_internal.k2
heaPum.eva.vol.steBal.allowFlowReversal
heaPum.eva.vol.steBal.port_a.h_outflow
heaPum.eva.vol.steBal.m_flow_nominal
heaPum.eva.vol.steBal.m_flow_small
heaPum.eva.vol.steBal.show_T
heaPum.eva.vol.steBal.dp
heaPum.eva.vol.steBal._m_flow_start
heaPum.eva.vol.steBal._dp_start
heaPum.eva.vol.steBal.simplify_mWat_flow
heaPum.eva.vol.steBal.prescribedHeatFlowRate
heaPum.eva.vol.steBal.use_mWat_flow
heaPum.eva.vol.steBal.use_C_flow
heaPum.eva.vol.steBal.use_m_flowInv
heaPum.eva.vol.steBal.m_flowInv
heaPum.eva.vol.steBal.deltaReg
heaPum.eva.vol.steBal.deltaInvReg
heaPum.eva.vol.steBal.aReg
heaPum.eva.vol.steBal.bReg
heaPum.eva.vol.steBal.cReg
heaPum.eva.vol.steBal.dReg
heaPum.eva.vol.steBal.eReg
heaPum.eva.vol.steBal.fReg
heaPum.eva.vol.steBal.state_default.p
heaPum.eva.vol.steBal.state_default.T
heaPum.eva.vol.steBal.cp_default
heaPum.eva.vol.steBal.dTMax
heaPum.eva.vol.steBal.mWat_flow_internal

double initialValue(366,6)
 -1       1                       0                       0                
  2     0   # _dummy
  0       0                       0                       0                
  3     0   # _derdummy
 -1      -5                       0                       0                
  1   280   # dTEva_nominal
  0      10                       0                       0                
  6   256   # dTCon_nominal
  0  100000                       0                       0                
  6   256   # QCon_flow_nominal
  0  2.3809523809523809E+00       0                       0                
  6   256   # m1_flow_nominal
  0       1                       0                       0                
  6   258   # sou1.nPorts
  0       0                       0                       0                
  6   257   # sou1.verifyInputs
  0 -2.3809523809523809E+00 -9.9999999999999995E+59  9.9999999999999995E+59
  6   388   # sou1.ports[1].m_flow
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6   260   # sou1.ports[1].p
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # sou1.ports[1].h_outflow
  0       3                       1                       3                
  6  1282   # sou1.flowDirection
  0       1                       0                       0                
  6  1280   # sou1.X_in_internal[1]
  0       0                       0                       0                
  6   769   # sou1.use_m_flow_in
  0  2.3809523809523809E+00       0                       0                
  6   256   # sou1.m_flow
  0  2.3809523809523809E+00       0                       0                
  6  1280   # sou1.m_flow_in_internal
  0       0                       0                       0                
  6   769   # sou1.use_T_in
 -1  2.9314999999999998E+02       1                   10000                
  1   280   # sou1.T
  0       0                       0                       0                
  6   769   # sou1.use_X_in
  0       0                       0                       0                
  6   769   # sou1.use_Xi_in
  0       0                       0                       0                
  6   769   # sou1.use_C_in
 -1       1                       0                       1                
  1   280   # sou1.X[1]
  0       1                       0                       0                
  6   258   # sou2.nPorts
  0       0                       0                       0                
  6   257   # sou2.verifyInputs
  0       0                 -100000                       0                
  6   388   # sou2.ports[1].m_flow
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6   260   # sou2.ports[1].p
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # sou2.ports[1].h_outflow
  0       3                       1                       3                
  6  1282   # sou2.flowDirection
  0       1                       0                       0                
  6  1280   # sou2.X_in_internal[1]
  0       1                       0                       0                
  6   769   # sou2.use_m_flow_in
 -1       0                       0                       0                
  1   280   # sou2.m_flow
  0       0                       0                       0                
  6   769   # sou2.use_T_in
 -1  2.8814999999999998E+02       1                   10000                
  1   280   # sou2.T
  0       0                       0                       0                
  6   769   # sou2.use_X_in
  0       0                       0                       0                
  6   769   # sou2.use_Xi_in
  0       0                       0                       0                
  6   769   # sou2.use_C_in
 -1       1                       0                       1                
  1   280   # sou2.X[1]
  0       1                       0                       0                
  6   258   # sin1.nPorts
  0  9.9558600000000001E+02       0                 1.0000000000000000E+100
  6   256   # sin1.medium.d
  0       1                       0                       1                
  6   256   # sin1.medium.X[1]
  0       0                       0                       0                
  6   256   # sin1.medium.R
  0  1.8015268000000001E-02       0                 1.0000000000000000E+100
  6   256   # sin1.medium.MM
  0       0                       0                       0                
  6   257   # sin1.medium.preferredMediumStates
  0       1                       0                       0                
  6   257   # sin1.medium.standardOrderComponents
  0       0                       0                       0                
  6   256   # sin1.medium.T_degC
  0       0                       0                       0                
  6   256   # sin1.medium.p_bar
  0  2.3809523809523809E+00 -9.9999999999999995E+59  9.9999999999999995E+59
  6   388   # sin1.ports[1].m_flow
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # sin1.ports[1].h_outflow
  0       3                       1                       3                
  6  1282   # sin1.flowDirection
  0       1                       0                       0                
  6   257   # sin1.use_p
 -1  3.0000000000000000E+05       0                  1.0000000000000000E+08
  1   280   # sin1.p
 -1  9.9558600000000001E+02       0                  100000                
  1   280   # sin1.d
  0       1                       0                       0                
  6   257   # sin1.use_T
 -1  2.9314999999999998E+02       1                   10000                
  1   280   # sin1.T
 -1   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  1   280   # sin1.h
 -1       1                       0                       1                
  1   280   # sin1.X[1]
  0       1                       0                       0                
  6   258   # sin2.nPorts
  0  9.9558600000000001E+02       0                 1.0000000000000000E+100
  6   256   # sin2.medium.d
  0       1                       0                       1                
  6   256   # sin2.medium.X[1]
  0       0                       0                       0                
  6   256   # sin2.medium.R
  0  1.8015268000000001E-02       0                 1.0000000000000000E+100
  6   256   # sin2.medium.MM
  0       0                       0                       0                
  6   257   # sin2.medium.preferredMediumStates
  0       1                       0                       0                
  6   257   # sin2.medium.standardOrderComponents
  0       0                       0                       0                
  6   256   # sin2.medium.T_degC
  0       0                       0                       0                
  6   256   # sin2.medium.p_bar
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # sin2.ports[1].h_outflow
  0       3                       1                       3                
  6  1282   # sin2.flowDirection
  0       1                       0                       0                
  6   257   # sin2.use_p
 -1  3.0000000000000000E+05       0                  1.0000000000000000E+08
  1   280   # sin2.p
 -1  9.9558600000000001E+02       0                  100000                
  1   280   # sin2.d
  0       1                       0                       0                
  6   257   # sin2.use_T
 -1  2.9314999999999998E+02       1                   10000                
  1   280   # sin2.T
 -1   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  1   280   # sin2.h
 -1       1                       0                       1                
  1   280   # sin2.X[1]
 -1      15                       0                       0                
  1   280   # TConLvg.height
 -1      60                       0                 1.0000000000000000E+100
  1   280   # TConLvg.duration
 -1  3.0814999999999998E+02       0                       0                
  1   280   # TConLvg.offset
 -1    1800                       0                       0                
  1   280   # TConLvg.startTime
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # TConLvg.y
  0       1                       0                       0                
  6   256   # mEva_flow.k
  0       0                       0                       0                
  6   256   # mEva_flow.u
  0       0                       0                       0                
  6   256   # QEva_flow.u1
  0       0                       0                       0                
  6   256   # QEva_flow.u2
 -1       1                       0                       0                
  1   280   # QEva_flow.k1
 -1      -1                       0                       0                
  1   280   # QEva_flow.k2
  0    4184                       0                       0                
  6   256   # cp2_default
  0       0                       0                       0                
  6   257   # heaPum.allowFlowReversal1
  0       0                       0                       0                
  6   257   # heaPum.allowFlowReversal2
  0  2.3809523809523809E+00       0                  100000                
  6   388   # heaPum.port_a1.m_flow
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # heaPum.port_a1.h_outflow
  0 -2.3809523809523809E+00 -100000                       0                
  6   388   # heaPum.port_b1.m_flow
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # heaPum.port_b1.h_outflow
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # heaPum.port_a2.h_outflow
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # heaPum.port_b2.h_outflow
  0  2.3809523809523809E+00       0                 1.0000000000000000E+100
  6   256   # heaPum.m1_flow_nominal
  0       2                       0                 1.0000000000000000E+100
  6   256   # heaPum.m2_flow_nominal
  0  2.3809523809523810E-04       0                  100000                
  6   256   # heaPum.m1_flow_small
  0  2.0000000000000001E-04       0                  100000                
  6   256   # heaPum.m2_flow_small
  0       1                       0                       0                
  6   257   # heaPum.show_T
  0  2.3809523809523809E+00 -100000                  100000                
  6   256   # heaPum.m1_flow
  0       0                       0                       0                
  6   256   # heaPum.dp1
  0       0                       0                       0                
  6   256   # heaPum.dp2
  0  2.9314999999999998E+02       1                   10000                
  6   256   # heaPum.sta_a1.T
  0  2.9314999999999998E+02       1                   10000                
  6   256   # heaPum.sta_b1.T
  0  2.9314999999999998E+02       1                   10000                
  6   256   # heaPum.sta_a2.T
  0  2.9314999999999998E+02       1                   10000                
  6   256   # heaPum.sta_b2.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # heaPum.state_a1_inflow.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # heaPum.state_b1_inflow.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # heaPum.state_a2_inflow.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # heaPum.state_b2_inflow.T
  0       0                 -1.0000000000000000E+100       0                
  6   320   # heaPum.QEva_flow_nominal
  0       0                       0                 1.0000000000000000E+100
  6   320   # heaPum.QCon_flow_nominal
  0       0                 -1.0000000000000000E+100       0                
  6   256   # heaPum.dTEva_nominal
  0      10                       0                 1.0000000000000000E+100
  6   256   # heaPum.dTCon_nominal
 -1       1                       0                       0                
  1   281   # heaPum.use_eta_Carnot_nominal
  0  2.9999999999999999E-01       0                       0                
  6   256   # heaPum.etaCarnot_nominal
  0       0                       0                       0                
  6   320   # heaPum.COP_nominal
 -1  3.0314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # heaPum.TCon_nominal
 -1  2.7814999999999998E+02       0                 1.0000000000000000E+100
  1   280   # heaPum.TEva_nominal
  0       1                       0                       0                
  6   256   # heaPum.a[1]
  0    6000                       0                       0                
  6   256   # heaPum.dp1_nominal
  0    6000                       0                       0                
  6   256   # heaPum.dp2_nominal
  0       2                       0                 1.0000000000000000E+100
  6   256   # heaPum.TAppCon_nominal
  0       2                       0                 1.0000000000000000E+100
  6   256   # heaPum.TAppEva_nominal
  0       1                       0                       0                
  6   257   # heaPum.homotopyInitialization
  0       0                       0                       0                
  6   257   # heaPum.from_dp1
  0       0                       0                       0                
  6   257   # heaPum.from_dp2
  0       0                       0                       0                
  6   257   # heaPum.linearizeFlowResistance1
  0       0                       0                       0                
  6   257   # heaPum.linearizeFlowResistance2
  0  1.0000000000000001E-01       0                       0                
  6   256   # heaPum.deltaM1
  0  1.0000000000000001E-01       0                       0                
  6   256   # heaPum.deltaM2
 -1      60                       0                       0                
  1   280   # heaPum.tau1
 -1      60                       0                       0                
  1   280   # heaPum.tau2
 -1  2.9314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # heaPum.T1_start
 -1  2.9314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # heaPum.T2_start
  0       4                       1                       4                
  6   258   # heaPum.energyDynamics
  0       0                       0                       0                
  6   256   # heaPum.QEva_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # heaPum.yPL
  0       1                       0                       0                
  6   256   # heaPum.etaPL
  0       0                       0                 1.0000000000000000E+100
  6   256   # heaPum.COP
  0       0                       0                 1.0000000000000000E+100
  6   256   # heaPum.COPCar
  0       0                       0                 1.0000000000000000E+100
  6   256   # heaPum.TConAct
  0       0                       0                 1.0000000000000000E+100
  6   256   # heaPum.TEvaAct
  0       0                       0                       0                
  6   321   # heaPum.COP_is_for_cooling
  0       0                       0                       0                
  6  1344   # heaPum.etaCarnot_nominal_internal
  0       1                       0                       0                
  6  1281   # heaPum.evaluate_etaPL
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1344   # heaPum.TUseAct_nominal
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # heaPum.TUseAct
  0    4184                       0                       0                
  6  1280   # heaPum.cp1_default
  0    4184                       0                       0                
  6  1280   # heaPum.cp2_default
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # heaPum.staA1.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # heaPum.staB1.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # heaPum.staA2.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # heaPum.staB2.T
  0       0                       0                       0                
  6  1281   # heaPum.con.allowFlowReversal
  0  2.3809523809523809E+00       0                  100000                
  6  1412   # heaPum.con.port_a.m_flow
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1284   # heaPum.con.port_a.h_outflow
  0 -2.3809523809523809E+00 -100000                       0                
  6  1412   # heaPum.con.port_b.m_flow
  0  2.3809523809523809E+00       0                       0                
  6  1280   # heaPum.con.m_flow_nominal
  0  1.0000000000000000E-04       0                 1.0000000000000000E+100
  6  1280   # heaPum.con.m_flow_small
  0       0                       0                       0                
  6  1281   # heaPum.con.show_T
  0  2.3809523809523809E+00       0                       0                
  6  1280   # heaPum.con.m_flow
  0       0                       0                       0                
  6  1280   # heaPum.con.dp
  0       0                       0                       0                
  6  1280   # heaPum.con._m_flow_start
  0       0                       0                       0                
  6  1280   # heaPum.con._dp_start
  0       1                       0                       0                
  6  1281   # heaPum.con.computeFlowResistance
  0       0                       0                       0                
  6  1281   # heaPum.con.from_dp
  0    6000                       0                 1.0000000000000000E+100
  6  1280   # heaPum.con.dp_nominal
  0       0                       0                       0                
  6  1281   # heaPum.con.linearizeFlowResistance
  0  1.0000000000000001E-01       0                       0                
  6  1280   # heaPum.con.deltaM
  0       0                       0                 1.0000000000000000E+100
  6  1280   # heaPum.con.tau
  0       0                       0                       0                
  6  1281   # heaPum.con.homotopyInitialization
  0       0                       0                       0                
  6  1281   # heaPum.con.preDro.allowFlowReversal
  0  2.3809523809523809E+00       0                  100000                
  6  1412   # heaPum.con.preDro.port_a.m_flow
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1284   # heaPum.con.preDro.port_a.h_outflow
  0 -2.3809523809523809E+00 -100000                       0                
  6  1412   # heaPum.con.preDro.port_b.m_flow
  0  2.3809523809523809E+00       0                       0                
  6  1280   # heaPum.con.preDro.m_flow_nominal
  0  2.3809523809523810E-04       0                 1.0000000000000000E+100
  6  1280   # heaPum.con.preDro.m_flow_small
  0       0                       0                       0                
  6  1281   # heaPum.con.preDro.show_T
  0  2.3809523809523809E+00       0                       0                
  6  1280   # heaPum.con.preDro.m_flow
  0       0                       0                       0                
  6  1280   # heaPum.con.preDro.dp
  0       0                       0                       0                
  6  1280   # heaPum.con.preDro._m_flow_start
  0       0                       0                       0                
  6  1280   # heaPum.con.preDro._dp_start
  0       0                       0                       0                
  6  1281   # heaPum.con.preDro.from_dp
  0    6000                       0                       0                
  6  1280   # heaPum.con.preDro.dp_nominal
  0       0                       0                       0                
  6  1281   # heaPum.con.preDro.homotopyInitialization
  0       0                       0                       0                
  6  1281   # heaPum.con.preDro.linearized
  0  2.3809523809523811E-01       0                 1.0000000000000000E+100
  6  1280   # heaPum.con.preDro.m_flow_turbulent
 -1  3.0000000000000000E+05       0                  1.0000000000000000E+08
  1  1304   # heaPum.con.preDro.sta_default.p
 -1  2.9314999999999998E+02       1                   10000                
  1  1304   # heaPum.con.preDro.sta_default.T
  0  1.0000000000000000E-03       0                 1.0000000000000000E+100
  6  1280   # heaPum.con.preDro.eta_default
  0  2.3809523809523809E+00       0                       0                
  6  1280   # heaPum.con.preDro.m_flow_nominal_pos
  0    6000                       0                       0                
  6  1280   # heaPum.con.preDro.dp_nominal_pos
  0       1                       0                       1                
  6  1280   # _GlobalScope.Modelica.Media.Interfaces.PartialPureSubstance.X_default[1]
  0  1.0000000000000001E-01  9.9999999999999995E-07 1.0000000000000000E+100
  6  1280   # heaPum.con.preDro.deltaM
  0  3.0737963065138228E-02       0                       0                
  6  1280   # heaPum.con.preDro.k
  0       1                       0                       0                
  6  1281   # heaPum.con.preDro.computeFlowResistance
  0       0                       0                       0                
  6  1280   # heaPum.con.preDro.coeff
  0       0                       0                       0                
  6  1281   # heaPum.con.outCon.allowFlowReversal
  0  2.3809523809523809E+00       0                  100000                
  6  1412   # heaPum.con.outCon.port_a.m_flow
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1284   # heaPum.con.outCon.port_a.h_outflow
  0 -2.3809523809523809E+00 -100000                       0                
  6  1412   # heaPum.con.outCon.port_b.m_flow
  0  2.3809523809523809E+00       0                       0                
  6  1280   # heaPum.con.outCon.m_flow_nominal
  0  1.0000000000000000E-04       0                 1.0000000000000000E+100
  6  1280   # heaPum.con.outCon.m_flow_small
  0       0                       0                       0                
  6  1281   # heaPum.con.outCon.show_T
  0  2.3809523809523809E+00       0                       0                
  6  1280   # heaPum.con.outCon.m_flow
  0       0                       0                       0                
  6  1280   # heaPum.con.outCon.dp
  0       0                       0                       0                
  6  1280   # heaPum.con.outCon._m_flow_start
  0       0                       0                       0                
  6  1280   # heaPum.con.outCon._dp_start
  0   30000                       0                 1.0000000000000000E+100
  6  1280   # heaPum.con.outCon.QMax_flow
  0  -60000                 -1.0000000000000000E+100       0                
  6  1280   # heaPum.con.outCon.QMin_flow
  0       0                       0                 1.0000000000000000E+100
  6  1280   # heaPum.con.outCon.mWatMax_flow
  0       0                 -1.0000000000000000E+100       0                
  6  1280   # heaPum.con.outCon.mWatMin_flow
  0       0                       0                 1.0000000000000000E+100
  6  1280   # heaPum.con.outCon.tau
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # heaPum.con.outCon.T_start
  0       1                       0                       1                
  6  1280   # heaPum.con.outCon.X_start[1]
  0       4                       1                       4                
  6  1282   # heaPum.con.outCon.energyDynamics
  0       4                       1                       4                
  6  1282   # heaPum.con.outCon.massDynamics
  0       1                       0                       0                
  6  1281   # heaPum.con.outCon.use_TSet
  0       0                       0                       0                
  6  1281   # heaPum.con.outCon.use_X_wSet
  0       0                       0                       0                
  6  1280   # heaPum.con.outCon.mWat_flow
 -1    4184                       0                       0                
  1  1304   # heaPum.con.outCon.cp_default
  0       1                       0                       0                
  6  1281   # heaPum.con.outCon.restrictHeat
  0       1                       0                       0                
  6  1281   # heaPum.con.outCon.restrictCool
  0       1                       0                       0                
  6  1281   # heaPum.con.outCon.restrictHumi
  0       1                       0                       0                
  6  1281   # heaPum.con.outCon.restrictDehu
  0       0                       0                       0                
  6  1280   # heaPum.con.outCon.deltaH
 -1  9.9999999999999995E-07       0                       1                
  1  1304   # heaPum.con.outCon.deltaXi
  0  2.3809523809523809E+00       0                       0                
  6  1280   # heaPum.con.outCon.m_flow_pos
  0  2.3809523809523809E+00       0                       0                
  6  1280   # heaPum.con.outCon.m_flow_non_zero
  0       0                       0                       0                
  6  1280   # heaPum.con.outCon.hSet
  0  1.0000000000000000E-02       0                       1                
  6  1280   # heaPum.con.outCon.Xi
  0       0                       0                       1                
  6  1280   # heaPum.con.outCon.Xi_outflow
  0       0                       0                       0                
  6  1280   # heaPum.con.outCon.dhAct
  0       0                       0                       0                
  6  1280   # heaPum.con.outCon.dXiAct
  0       1                       0                       0                
  6  1280   # heaPum.con.outCon.k
  0       1                       0                       0                
  6  1280   # heaPum.con.outCon.mNor_flow
  0  1.0000000000000000E-02       0                       0                
  6  1280   # heaPum.con.outCon.X_wSet_internal
  0   30000                       0                 1.0000000000000000E+100
  6  1280   # heaPum.con.QMax_flow
  0  -60000                 -1.0000000000000000E+100       0                
  6  1280   # heaPum.con.QMin_flow
  0       0                       0                 1.0000000000000000E+100
  6  1280   # heaPum.con.mWatMax_flow
  0       0                 -1.0000000000000000E+100       0                
  6  1280   # heaPum.con.mWatMin_flow
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # heaPum.con.T_start
  0       1                       0                       1                
  6  1280   # heaPum.con.X_start[1]
  0       4                       1                       4                
  6  1282   # heaPum.con.energyDynamics
  0       4                       1                       4                
  6  1282   # heaPum.con.massDynamics
  0       1                       0                       0                
  6  1281   # heaPum.con.use_TSet
  0       0                       0                       0                
  6  1281   # heaPum.con.use_X_wSet
  0       0                       0                       0                
  6  1280   # heaPum.con.Q_flow
  0       0                       0                       0                
  6  1280   # heaPum.con.mWat_flow
  0       0                       0                       0                
  6  1281   # heaPum.eva.allowFlowReversal
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1284   # heaPum.eva.port_a.h_outflow
  0       2                       0                       0                
  6  1280   # heaPum.eva.m_flow_nominal
  0  1.0000000000000000E-04       0                 1.0000000000000000E+100
  6  1280   # heaPum.eva.m_flow_small
  0       0                       0                       0                
  6  1281   # heaPum.eva.show_T
  0       0                       0                       0                
  6  1280   # heaPum.eva.dp
  0       0                       0                       0                
  6  1280   # heaPum.eva._m_flow_start
  0       0                       0                       0                
  6  1280   # heaPum.eva._dp_start
  0       1                       0                       0                
  6  1281   # heaPum.eva.computeFlowResistance
  0       0                       0                       0                
  6  1281   # heaPum.eva.from_dp
  0    6000                       0                 1.0000000000000000E+100
  6  1280   # heaPum.eva.dp_nominal
  0       0                       0                       0                
  6  1281   # heaPum.eva.linearizeFlowResistance
  0  1.0000000000000001E-01       0                       0                
  6  1280   # heaPum.eva.deltaM
  0       0                       0                       0                
  6  1280   # heaPum.eva.tau
  0       1                       0                       0                
  6  1281   # heaPum.eva.homotopyInitialization
  0       4                       1                       4                
  6  1282   # heaPum.eva.energyDynamics
  0       4                       1                       4                
  6  1282   # heaPum.eva.massDynamics
 -1  3.0000000000000000E+05       0                  1.0000000000000000E+08
  1  1304   # heaPum.eva.p_start
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # heaPum.eva.T_start
 -1       1                       0                       1                
  1  1304   # heaPum.eva.X_start[1]
  0       4                       1                       4                
  6  1282   # heaPum.eva.vol.energyDynamics
  0       4                       1                       4                
  6  1282   # heaPum.eva.vol.massDynamics
  0       4                       1                       4                
  6  1282   # heaPum.eva.vol.substanceDynamics
  0       4                       1                       4                
  6  1282   # heaPum.eva.vol.traceDynamics
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6  1280   # heaPum.eva.vol.p_start
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # heaPum.eva.vol.T_start
  0       0                       0                       1                
  6  1280   # heaPum.eva.vol.X_start[1]
  0       1                       1                 1.0000000000000000E+100
  6  1280   # heaPum.eva.vol.mSenFac
  0       0                       0                       0                
  6   769   # heaPum.eva.vol.initialize_p
  0       1                       0                       0                
  6  1281   # heaPum.eva.vol.prescribedHeatFlowRate
  0       1                       0                       0                
  6  1281   # heaPum.eva.vol.simplify_mWat_flow
  0       2                       0                 1.0000000000000000E+100
  6  1280   # heaPum.eva.vol.m_flow_nominal
  0       2                       0                       0                
  6  1282   # heaPum.eva.vol.nPorts
  0  2.0000000000000001E-04       0                 1.0000000000000000E+100
  6  1280   # heaPum.eva.vol.m_flow_small
  0       0                       0                       0                
  6  1281   # heaPum.eva.vol.allowFlowReversal
  0       0                       0                       0                
  6  1280   # heaPum.eva.vol.V
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1284   # heaPum.eva.vol.ports[1].h_outflow
  0     300                       1                   10000                
  6  1280   # heaPum.eva.vol.T
  0       0                       0                       0                
  6  1280   # heaPum.eva.vol.U
  0       0                       0                       0                
  6  1280   # heaPum.eva.vol.m
  0  9.9558600000000001E+02       0                 1.0000000000000000E+100
  6  1280   # heaPum.eva.vol.rho_start
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6  1280   # heaPum.eva.vol.state_default.p
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # heaPum.eva.vol.state_default.T
  0  9.9558600000000001E+02       0                 1.0000000000000000E+100
  6  1280   # heaPum.eva.vol.rho_default
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6  1280   # heaPum.eva.vol.state_start.p
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # heaPum.eva.vol.state_start.T
  0       1                       0                       0                
  6  1281   # heaPum.eva.vol.useSteadyStateTwoPort
  0       0                       0                       0                
  6  1281   # heaPum.eva.vol.use_C_flow
  0       0                       0                       0                
  6  1281   # heaPum.eva.preDro.allowFlowReversal
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1284   # heaPum.eva.preDro.port_a.h_outflow
  0       2                       0                       0                
  6  1280   # heaPum.eva.preDro.m_flow_nominal
  0  2.0000000000000001E-04       0                 1.0000000000000000E+100
  6  1280   # heaPum.eva.preDro.m_flow_small
  0       0                       0                       0                
  6  1281   # heaPum.eva.preDro.show_T
  0       0                       0                       0                
  6  1280   # heaPum.eva.preDro.dp
  0       0                       0                       0                
  6  1280   # heaPum.eva.preDro._m_flow_start
  0       0                       0                       0                
  6  1280   # heaPum.eva.preDro._dp_start
  0       0                       0                       0                
  6  1281   # heaPum.eva.preDro.from_dp
  0    6000                       0                       0                
  6  1280   # heaPum.eva.preDro.dp_nominal
  0       1                       0                       0                
  6  1281   # heaPum.eva.preDro.homotopyInitialization
  0       0                       0                       0                
  6  1281   # heaPum.eva.preDro.linearized
  0  2.0000000000000001E-01       0                 1.0000000000000000E+100
  6  1280   # heaPum.eva.preDro.m_flow_turbulent
 -1  3.0000000000000000E+05       0                  1.0000000000000000E+08
  1  1304   # heaPum.eva.preDro.sta_default.p
 -1  2.9314999999999998E+02       1                   10000                
  1  1304   # heaPum.eva.preDro.sta_default.T
  0  1.0000000000000000E-03       0                 1.0000000000000000E+100
  6  1280   # heaPum.eva.preDro.eta_default
  0       2                       0                       0                
  6  1280   # heaPum.eva.preDro.m_flow_nominal_pos
  0    6000                       0                       0                
  6  1280   # heaPum.eva.preDro.dp_nominal_pos
  0  1.0000000000000001E-01  9.9999999999999995E-07 1.0000000000000000E+100
  6  1280   # heaPum.eva.preDro.deltaM
  0  2.5819888974716113E-02       0                       0                
  6  1280   # heaPum.eva.preDro.k
  0       1                       0                       0                
  6  1281   # heaPum.eva.preDro.computeFlowResistance
  0       0                       0                       0                
  6  1280   # heaPum.eva.preDro.coeff
 -1  3.0000000000000000E+05       0                  1.0000000000000000E+08
  1  1304   # heaPum.eva.sta_default.p
 -1  2.9314999999999998E+02       1                   10000                
  1  1304   # heaPum.eva.sta_default.T
  0  9.9558600000000001E+02       0                 1.0000000000000000E+100
  6  1280   # heaPum.eva.rho_default
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6  1280   # heaPum.eva.sta_start.p
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # heaPum.eva.sta_start.T
  0       0                       0                       0                
  6  1280   # heaPum.eva.h_outflow_start
  0       1                       0                       0                
  6  1280   # heaPum.eva.Q_flow_nominal
  0       0                       0                       0                
  6  1280   # heaPum.eva.u
 -1  2.9314999999999998E+02       0                 1.0000000000000000E+100
  1  1304   # heaPum.eva.preHea.T_ref
  0       0                       0                       0                
  6  1280   # heaPum.eva.preHea.alpha
  0       1                       0                       0                
  6  1280   # heaPum.eva.gai.k
  0  -60000                 -1.0000000000000000E+100       0                
  6   256   # heaPum.QEva_flow_min
  0   30000                       0                 1.0000000000000000E+100
  6   256   # heaPum.QCon_flow_max
  0  100000                       0                 1.0000000000000000E+100
  6   256   # heaPum.Q_heating_nominal
 -1   -1000                 -1.0000000000000000E+100       0                
  1   280   # heaPum.Q_cooling_nominal
 -1  2.8414999999999998E+02       0                       0                
  1   280   # heaPum.modi.threshold
  0       0                       0                       0                
  6   256   # heaPum.realExpression.y
  0      -1                       0                       0                
  6  1280   # heaPum.Q_flow_internal.k1
 -1       1                       0                       0                
  1  1304   # heaPum.Q_flow_internal.k2
  0       0                       0                       0                
  6  1281   # heaPum.eva.vol.steBal.allowFlowReversal
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1284   # heaPum.eva.vol.steBal.port_a.h_outflow
  0       2                       0                       0                
  6  1280   # heaPum.eva.vol.steBal.m_flow_nominal
  0  2.0000000000000001E-04       0                 1.0000000000000000E+100
  6  1280   # heaPum.eva.vol.steBal.m_flow_small
  0       0                       0                       0                
  6  1281   # heaPum.eva.vol.steBal.show_T
  0       0                       0                       0                
  6  1280   # heaPum.eva.vol.steBal.dp
  0       0                       0                       0                
  6  1280   # heaPum.eva.vol.steBal._m_flow_start
  0       0                       0                       0                
  6  1280   # heaPum.eva.vol.steBal._dp_start
  0       1                       0                       0                
  6  1281   # heaPum.eva.vol.steBal.simplify_mWat_flow
  0       1                       0                       0                
  6  1281   # heaPum.eva.vol.steBal.prescribedHeatFlowRate
  0       0                       0                       0                
  6  1281   # heaPum.eva.vol.steBal.use_mWat_flow
  0       0                       0                       0                
  6  1281   # heaPum.eva.vol.steBal.use_C_flow
  0       1                       0                       0                
  6  1281   # heaPum.eva.vol.steBal.use_m_flowInv
  0       0                       0                       0                
  6  1280   # heaPum.eva.vol.steBal.m_flowInv
  0  2.0000000000000002E-07       0                       0                
  6  1280   # heaPum.eva.vol.steBal.deltaReg
  0  5.0000000000000000E+06       0                       0                
  6  1280   # heaPum.eva.vol.steBal.deltaInvReg
  0 -7.5000000000000000E+07       0                       0                
  6  1280   # heaPum.eva.vol.steBal.aReg
  0  2.9750000000000000E+15       0                       0                
  6  1280   # heaPum.eva.vol.steBal.bReg
  0 -4.5125000000000001E+22       0                       0                
  6  1280   # heaPum.eva.vol.steBal.cReg
  0  3.3375000000000002E+29       0                       0                
  6  1280   # heaPum.eva.vol.steBal.dReg
  0 -1.1875000000000000E+36       0                       0                
  6  1280   # heaPum.eva.vol.steBal.eReg
  0  1.6250000000000001E+42       0                       0                
  6  1280   # heaPum.eva.vol.steBal.fReg
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6  1280   # heaPum.eva.vol.steBal.state_default.p
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # heaPum.eva.vol.steBal.state_default.T
  0    4184                       0                       0                
  6  1280   # heaPum.eva.vol.steBal.cp_default
  0     200                       1                 1.0000000000000000E+100
  6  1280   # heaPum.eva.vol.steBal.dTMax
  0       0                       0                       0                
  6  1280   # heaPum.eva.vol.steBal.mWat_flow_internal


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(366,184)
dummy
derdummy
Temperature difference evaporator inlet-outlet [K,]
Temperature difference condenser outlet-inlet [K,]
Evaporator heat flow rate [W]
Nominal mass flow rate at condenser [kg/s]
Number of ports [:#(type=Integer)]
Set to true to stop the simulation with an error if the medium temperature is outside its allowable range [:#(type=Boolean)]
Mass flow rate from the connection point into the component [kg/s]
Thermodynamic pressure in the connection point [Pa|bar]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Allowed flow direction [:#(type=Modelica.Fluid.Types.PortFlowDirection)]
Needed to connect to conditional connector [kg/kg]
Get the mass flow rate from the input connector [:#(type=Boolean)]
Fixed mass flow rate going out of the fluid port [kg/s]
Needed to connect to conditional connector [kg/s]
Get the temperature from the input connector [:#(type=Boolean)]
Fixed value of temperature [K|degC]
Get the composition (all fractions) from the input connector [:#(type=Boolean)]
Get the composition (independent fractions) from the input connector [:#(type=Boolean)]
Get the trace substances from the input connector [:#(type=Boolean)]
Fixed value of composition [kg/kg]
Number of ports [:#(type=Integer)]
Set to true to stop the simulation with an error if the medium temperature is outside its allowable range [:#(type=Boolean)]
Mass flow rate from the connection point into the component [kg/s]
Thermodynamic pressure in the connection point [Pa|bar]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Allowed flow direction [:#(type=Modelica.Fluid.Types.PortFlowDirection)]
Needed to connect to conditional connector [kg/kg]
Get the mass flow rate from the input connector [:#(type=Boolean)]
Fixed mass flow rate going out of the fluid port [kg/s]
Get the temperature from the input connector [:#(type=Boolean)]
Fixed value of temperature [K|degC]
Get the composition (all fractions) from the input connector [:#(type=Boolean)]
Get the composition (independent fractions) from the input connector [:#(type=Boolean)]
Get the trace substances from the input connector [:#(type=Boolean)]
Fixed value of composition [kg/kg]
Number of ports [:#(type=Integer)]
Density of medium [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [1]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
If true, and reducedX = true, the last element of X will be computed from the other ones [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Mass flow rate from the connection point into the component [kg/s]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Allowed flow direction [:#(type=Modelica.Fluid.Types.PortFlowDirection)]
select p or d [:#(type=Boolean)]
Boundary pressure [Pa|bar]
Boundary density [kg/m3|g/cm3]
select T or h [:#(type=Boolean)]
Boundary temperature [K|degC]
Boundary specific enthalpy [J/kg]
Boundary mass fractions m_i/m [kg/kg]
Number of ports [:#(type=Integer)]
Density of medium [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [1]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
If true, and reducedX = true, the last element of X will be computed from the other ones [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Allowed flow direction [:#(type=Modelica.Fluid.Types.PortFlowDirection)]
select p or d [:#(type=Boolean)]
Boundary pressure [Pa|bar]
Boundary density [kg/m3|g/cm3]
select T or h [:#(type=Boolean)]
Boundary temperature [K|degC]
Boundary specific enthalpy [J/kg]
Boundary mass fractions m_i/m [kg/kg]
Height of ramps
Duration of ramp (= 0.0 gives a Step) [s]
Offset of output signal
Output = offset for time < startTime [s]
Connector of Real output signal
Gain value multiplied with input signal [1]
Input signal connector
Connector of Real input signal 1
Connector of Real input signal 2
Gain of upper input
Gain of lower input
Specific heat capacity of medium 2 at default medium state [J/(kg.K)]
= false to simplify equations, assuming, but not enforcing, no flow reversal for medium 1 [:#(type=Boolean)]
= false to simplify equations, assuming, but not enforcing, no flow reversal for medium 2 [:#(type=Boolean)]
Mass flow rate from the connection point into the component [kg/s]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Mass flow rate from the connection point into the component [kg/s]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Nominal mass flow rate [kg/s]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, if actual temperature at port is computed [:#(type=Boolean)]
Mass flow rate from port_a1 to port_b1 (m1_flow > 0 is design flow direction) [kg/s]
Pressure difference between port_a1 and port_b1 [Pa|Pa]
Pressure difference between port_a2 and port_b2 [Pa|Pa]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Nominal cooling heat flow rate (QEva_flow_nominal < 0) [W]
Nominal heating flow rate [W]
Temperature difference evaporator outlet-inlet [K,]
Temperature difference condenser outlet-inlet [K,]
Set to true to use Carnot effectiveness etaCarnot_nominal rather than COP_nominal [:#(type=Boolean)]
Carnot effectiveness (=COP/COP_Carnot) used if use_eta_Carnot_nominal = true [1]
Coefficient of performance at TEva_nominal and TCon_nominal, used if use_eta_Carnot_nominal = false [1]
Condenser temperature used to compute COP_nominal if use_eta_Carnot_nominal=false [K|degC]
Evaporator temperature used to compute COP_nominal if use_eta_Carnot_nominal=false [K|degC]
Coefficients for efficiency curve (need p(a=a, yPL=1)=1)
Pressure difference over condenser [Pa|Pa]
Pressure difference over evaporator [Pa|Pa]
Temperature difference between refrigerant and working fluid outlet in condenser [K,]
Temperature difference between refrigerant and working fluid outlet in evaporator [K,]
= true, use homotopy method [:#(type=Boolean)]
= true, use m_flow = f(dp) else dp = f(m_flow) [:#(type=Boolean)]
= true, use m_flow = f(dp) else dp = f(m_flow) [:#(type=Boolean)]
= true, use linear relation between m_flow and dp for any flow rate [:#(type=Boolean)]
= true, use linear relation between m_flow and dp for any flow rate [:#(type=Boolean)]
Fraction of nominal flow rate where flow transitions to laminar [1]
Fraction of nominal flow rate where flow transitions to laminar [1]
Time constant at nominal flow rate (used if energyDynamics1 <> Modelica.Fluid.Types.Dynamics.SteadyState) [s]
Time constant at nominal flow rate (used if energyDynamics2 <> Modelica.Fluid.Types.Dynamics.SteadyState) [s]
Initial or guess value of set point [K|degC]
Initial or guess value of set point [K|degC]
Type of energy balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Actual cooling heat flow rate removed from fluid 2 [W]
Part load ratio [1]
Efficiency due to part load (etaPL(yPL=1)=1) [1]
Coefficient of performance [1]
Carnot efficiency
Condenser temperature used to compute efficiency, taking into account pinch temperature between fluid and refrigerant [K|degC]
Evaporator temperature used to compute efficiency, taking into account pinch temperature between fluid and refrigerant [K|degC]
Set to true if the specified COP is for cooling [:#(type=Boolean)]
Carnot effectiveness (=COP/COP_Carnot) used to compute COP [1]
Flag, true if etaPL should be computed as it depends on yPL [:#(type=Boolean)]
Nominal evaporator temperature for chiller or condenser temperature for heat pump, taking into account pinch temperature between fluid and refrigerant [K|degC]
Temperature of useful heat (evaporator for chiller, condenser for heat pump), taking into account pinch temperature between fluid and refrigerant [K|degC]
Specific heat capacity of medium 1 at default medium state [J/(kg.K)]
Specific heat capacity of medium 2 at default medium state [J/(kg.K)]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
= false to simplify equations, assuming, but not enforcing, no flow reversal [:#(type=Boolean)]
Mass flow rate from the connection point into the component [kg/s]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Mass flow rate from the connection point into the component [kg/s]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, if actual temperature at port is computed [:#(type=Boolean)]
Mass flow rate from port_a to port_b (m_flow > 0 is design flow direction) [kg/s]
Pressure difference between port_a and port_b [Pa|Pa]
Start value for m_flow, used to avoid a warning if not set in m_flow, and to avoid m_flow.start in parameter window [kg/s]
Start value for dp, used to avoid a warning if not set in dp, and to avoid dp.start in parameter window [Pa|Pa]
=true, compute flow resistance. Set to false to assume no friction [:#(type=Boolean)]
= true, use m_flow = f(dp) else dp = f(m_flow) [:#(type=Boolean)]
Pressure difference [Pa|Pa]
= true, use linear relation between m_flow and dp for any flow rate [:#(type=Boolean)]
Fraction of nominal flow rate where flow transitions to laminar
Time constant at nominal flow rate (used if energyDynamics or massDynamics not equal Modelica.Fluid.Types.Dynamics.SteadyState) [s]
= true, use homotopy method [:#(type=Boolean)]
= false to simplify equations, assuming, but not enforcing, no flow reversal [:#(type=Boolean)]
Mass flow rate from the connection point into the component [kg/s]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Mass flow rate from the connection point into the component [kg/s]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, if actual temperature at port is computed [:#(type=Boolean)]
Mass flow rate from port_a to port_b (m_flow > 0 is design flow direction) [kg/s]
Pressure difference between port_a and port_b [Pa|Pa]
Start value for m_flow, used to avoid a warning if not set in m_flow, and to avoid m_flow.start in parameter window [kg/s]
Start value for dp, used to avoid a warning if not set in dp, and to avoid dp.start in parameter window [Pa|Pa]
= true, use m_flow = f(dp) else dp = f(m_flow) [:#(type=Boolean)]
Pressure drop at nominal mass flow rate [Pa|Pa]
= true, use homotopy method [:#(type=Boolean)]
= true, use linear relation between m_flow and dp for any flow rate [:#(type=Boolean)]
Turbulent flow if |m_flow| >= m_flow_turbulent [kg/s]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Dynamic viscosity, used to compute transition to turbulent flow regime [Pa.s]
Absolute value of nominal flow rate [kg/s]
Absolute value of nominal pressure difference [Pa|Pa]
Default value for mass fractions of medium (for initialization) [kg/kg]
Fraction of nominal mass flow rate where transition to turbulent occurs
Flow coefficient, k=m_flow/sqrt(dp), with unit=(kg.m)^(1/2)
Flag to enable/disable computation of flow resistance [:#(type=Boolean)]
Precomputed coefficient to avoid division by parameter
= false to simplify equations, assuming, but not enforcing, no flow reversal [:#(type=Boolean)]
Mass flow rate from the connection point into the component [kg/s]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Mass flow rate from the connection point into the component [kg/s]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, if actual temperature at port is computed [:#(type=Boolean)]
Mass flow rate from port_a to port_b (m_flow > 0 is design flow direction) [kg/s]
Pressure difference between port_a and port_b [Pa|Pa]
Start value for m_flow, used to avoid a warning if not set in m_flow, and to avoid m_flow.start in parameter window [kg/s]
Start value for dp, used to avoid a warning if not set in dp, and to avoid dp.start in parameter window [Pa|Pa]
Maximum heat flow rate for heating (positive) [W]
Maximum heat flow rate for cooling (negative) [W]
Maximum water mass flow rate addition (positive) [kg/s]
Maximum water mass flow rate removal (negative) [kg/s]
Time constant at nominal flow rate (used if energyDynamics or massDynamics not equal Modelica.Fluid.Types.Dynamics.SteadyState) [s]
Start value of temperature [K|degC]
Start value of mass fractions m_i/m [1]
Type of energy balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Type of mass balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Set to false to disable temperature set point [:#(type=Boolean)]
Set to false to disable water vapor set point [:#(type=Boolean)]
Water vapor mass flow rate added to the fluid (if flow is from port_a to port_b) [kg/s]
Specific heat capacity at default medium state [J/(kg.K)]
Flag, true if maximum heating power is restricted [:#(type=Boolean)]
Flag, true if maximum cooling power is restricted [:#(type=Boolean)]
Flag, true if maximum humidification is restricted [:#(type=Boolean)]
Flag, true if maximum dehumidification is restricted [:#(type=Boolean)]
Small value for deltaH used for regularization [J/kg]
Small mass fraction used for regularization [1]
Mass flow rate, or zero if reverse flow [kg/s]
Mass flow rate bounded away from zero [kg/s]
Set point for enthalpy leaving port_b [J/kg]
Water vapor mass fraction of outlet state assuming unlimited capacity and taking dynamics into account [1]
Outstreaming water vapor mass fraction at port_a [1]
Actual enthalpy difference from port_a to port_b [J/kg]
Actual mass fraction difference from port_a to port_b [1]
Gain to take flow rate into account for sensor time constant
Normalized mass flow rate
Internal connector for set point for water vapor mass fraction of the fluid that leaves port_b [1]
Maximum heat flow rate for heating (positive) [W]
Maximum heat flow rate for cooling (negative) [W]
Maximum water mass flow rate addition (positive) [kg/s]
Maximum water mass flow rate removal (negative) [kg/s]
Start value of temperature [K|degC]
Start value of mass fractions m_i/m [1]
Type of energy balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Type of mass balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Set to false to disable temperature set point [:#(type=Boolean)]
Set to false to disable water vapor set point [:#(type=Boolean)]
Heat flow rate added to the fluid (if flow is from port_a to port_b) [W]
Water vapor mass flow rate added to the fluid (if flow is from port_a to port_b) [kg/s]
= false to simplify equations, assuming, but not enforcing, no flow reversal [:#(type=Boolean)]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, if actual temperature at port is computed [:#(type=Boolean)]
Pressure difference between port_a and port_b [Pa|Pa]
Start value for m_flow, used to avoid a warning if not set in m_flow, and to avoid m_flow.start in parameter window [kg/s]
Start value for dp, used to avoid a warning if not set in dp, and to avoid dp.start in parameter window [Pa|Pa]
=true, compute flow resistance. Set to false to assume no friction [:#(type=Boolean)]
= true, use m_flow = f(dp) else dp = f(m_flow) [:#(type=Boolean)]
Pressure difference [Pa|Pa]
= true, use linear relation between m_flow and dp for any flow rate [:#(type=Boolean)]
Fraction of nominal flow rate where flow transitions to laminar
Time constant at nominal flow (if energyDynamics <> SteadyState) [s]
= true, use homotopy method [:#(type=Boolean)]
Type of energy balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Type of mass balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Start value of pressure [Pa|bar]
Start value of temperature [K|degC]
Start value of mass fractions m_i/m [kg/kg]
Type of energy balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Type of mass balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Type of independent mass fraction balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Type of trace substance balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Start value of pressure [Pa|bar]
Start value of temperature [K|degC]
Start value of mass fractions m_i/m [kg/kg]
Factor for scaling the sensible thermal mass of the volume
= true to set up initial equations for pressure [:#(type=Boolean)]
Set to true if the model has a prescribed heat flow at its heatPort. If the heat flow rate at the heatPort is only based on temperature difference, then set to false [:#(type=Boolean)]
Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero [:#(type=Boolean)]
Nominal mass flow rate [kg/s]
Number of ports [:#(type=Integer)]
Small mass flow rate for regularization of zero flow [kg/s]
= false to simplify equations, assuming, but not enforcing, no flow reversal. Used only if model has two ports. [:#(type=Boolean)]
Volume [m3]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Temperature of the fluid [K|degC]
Internal energy of the component [J]
Mass of the component [kg]
Density, used to compute start and guess values [kg/m3|g/cm3]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Density, used to compute fluid mass [kg/m3|g/cm3]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Flag, true if the model has two ports only and uses a steady state balance [:#(type=Boolean)]
Set to true to enable input connector for trace substance [:#(type=Boolean)]
= false to simplify equations, assuming, but not enforcing, no flow reversal [:#(type=Boolean)]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, if actual temperature at port is computed [:#(type=Boolean)]
Pressure difference between port_a and port_b [Pa|Pa]
Start value for m_flow, used to avoid a warning if not set in m_flow, and to avoid m_flow.start in parameter window [kg/s]
Start value for dp, used to avoid a warning if not set in dp, and to avoid dp.start in parameter window [Pa|Pa]
= true, use m_flow = f(dp) else dp = f(m_flow) [:#(type=Boolean)]
Pressure drop at nominal mass flow rate [Pa|Pa]
= true, use homotopy method [:#(type=Boolean)]
= true, use linear relation between m_flow and dp for any flow rate [:#(type=Boolean)]
Turbulent flow if |m_flow| >= m_flow_turbulent [kg/s]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Dynamic viscosity, used to compute transition to turbulent flow regime [Pa.s]
Absolute value of nominal flow rate [kg/s]
Absolute value of nominal pressure difference [Pa|Pa]
Fraction of nominal mass flow rate where transition to turbulent occurs
Flow coefficient, k=m_flow/sqrt(dp), with unit=(kg.m)^(1/2)
Flag to enable/disable computation of flow resistance [:#(type=Boolean)]
Precomputed coefficient to avoid division by parameter
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Density, used to compute fluid volume [kg/m3|g/cm3]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Start value for outflowing enthalpy [J/kg]
Heat flow rate at u=1, positive for heating [W]
Control input [1]
Reference temperature [K|degC]
Temperature coefficient of heat flow rate [1/K]
Gain value multiplied with input signal [1]
Maximum heat flow rate for cooling (negative) [W]
Maximum heat flow rate for heating (positive) [W]
[W]
[W]
Comparison with respect to threshold
Value of Real output
Gain of upper input
Gain of lower input
= false to simplify equations, assuming, but not enforcing, no flow reversal [:#(type=Boolean)]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, if actual temperature at port is computed [:#(type=Boolean)]
Pressure difference between port_a and port_b [Pa|Pa]
Start value for m_flow, used to avoid a warning if not set in m_flow, and to avoid m_flow.start in parameter window [kg/s]
Start value for dp, used to avoid a warning if not set in dp, and to avoid dp.start in parameter window [Pa|Pa]
Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero [:#(type=Boolean)]
Set to true if the heat flow rate is not a function of a temperature difference to the fluid temperature [:#(type=Boolean)]
Set to true to enable input connector for moisture mass flow rate [:#(type=Boolean)]
Set to true to enable input connector for trace substance [:#(type=Boolean)]
Flag, true if m_flowInv is used in the model [:#(type=Boolean)]
Regularization of 1/m_flow of port_a [s/kg]
Smoothing region for inverseXRegularized
Inverse value of delta for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Specific heat capacity, used to verify energy conservation [J/(kg.K)]
Maximum temperature difference across the StaticTwoPortConservationEquation [K,]
Needed to connect to conditional connector [kg/s]

